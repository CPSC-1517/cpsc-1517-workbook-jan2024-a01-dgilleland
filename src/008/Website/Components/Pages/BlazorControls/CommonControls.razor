@page "/BlazorControls/InputComponents"
@using System.ComponentModel.DataAnnotations
@using WebApp.Components.Shipyards;
@rendermode InteractiveServer

<PageTitle>Blazor Components - Input Components</PageTitle>

<h1>Input Components - Common Controls in Blazor</h1>

<p>These samples are adapted from the existing ones in the articles on Blazor <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/input-components?view=aspnetcore-8.0" target="_blank">Input Components</a> and <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/binding?view=aspnetcore-8.0" target="_blank" rel="noopener noreferrer">ASP.NET Core Blazor forms binding</a> by Microsoft. They revolve around the notion of a "Starfleet Starship Database". I've interspersed a few other samples here-and-there, but these should cover most of the usages you might encounter in this course. <i>Click the accordian titles below to view each demo.</i></p>

<style>
    article > details > article {
        background-color: var(--pico-switch-background-color);
    }
    article > details section {
        columns: 2;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        Initialize_Model_3();
        Initialize_Model_4();
        Initialize_Model_5();
        Initialize_Model_6();
        Initialize_Model_Extra();
    }

    private void DoNothing()
    {
        // As the name suggests....
    }
}

<article> <!-- Starship-3 -->
    <details>
        <summary role="button" class="secondary"><b>Starship-3</b> Adaptation</summary>
        <h2>New Ship Entry Form</h2>
        <article>
            <p>The following form accepts and validates user input using:</p>
            <ul>
                <li>The properties and validation defined in the preceding Starship model.</li>
                <li>Several of Blazor's built-in input components.</li>
            </ul>
        </article>
        <EditForm Model="Model_3" OnValidSubmit="Submit_3" FormName="Starship3">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset role="group">
                <label>
                    Identifier: 
                    <InputText @bind-Value="Model_3!.Id" />
                </label>

                <label>
                    Primary Classification: 
                    <InputSelect @bind-Value="Model_3!.Classification">
                        <option value="">
                            Select classification ...
                        </option>
                        <option checked="@(Model_3!.Classification == "Exploration")" 
                            value="Exploration">
                            Exploration
                        </option>
                        <option checked="@(Model_3!.Classification == "Diplomacy")" 
                            value="Diplomacy">
                            Diplomacy
                        </option>
                        <option checked="@(Model_3!.Classification == "Defense")" 
                            value="Defense">
                            Defense
                        </option>
                    </InputSelect>
                </label>

                <label>
                    Maximum Accommodation: 
                    <InputNumber @bind-Value="Model_3!.MaximumAccommodation" />
                </label>

                <label>
                    Production Date: 
                    <InputDate @bind-Value="Model_3!.ProductionDate" />
                </label>
            </fieldset>
            <label>
                Description (optional): 
                <InputTextArea @bind-Value="Model_3!.Description" />
            </label>
            <label>
                Engineering Approval: 
                <InputCheckbox @bind-Value="Model_3!.IsValidatedDesign" />
            </label>
            <button type="submit">Submit</button>
        </EditForm>
        <blockquote>
            @if(Model_3!.IsValidatedDesign)
            {
                <StarshipProfile Ship="Model_3" />
            }
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>

        @code {
            [SupplyParameterFromForm]
            private BlazorSample.Starship? Model_3 { get; set; }

            private void Initialize_Model_3()  =>
                Model_3 ??= new() { ProductionDate = DateTime.UtcNow };

            private void Submit_3()
            {
                @* Logger.LogInformation("Id = {Id} Description = {Description} " +
                    "Classification = {Classification} MaximumAccommodation = " +
                    "{MaximumAccommodation} IsValidatedDesign = " +
                    "{IsValidatedDesign} ProductionDate = {ProductionDate}",
                    Model?.Id, Model?.Description, Model?.Classification,
                    Model?.MaximumAccommodation, Model?.IsValidatedDesign,
                    Model?.ProductionDate); *@
            }
        } 
    </details>
</article>


<article> <!-- Starship-4 -->
    <details>
        <summary role="button" class="secondary"><b>Startship-4</b> Adaptation</summary>
        <article>
            <p>In the following example:</p>
            <ul>
                <li>A shortened version of the earlier Starfleet Starship Database form (Starship3 component) is used that only accepts a value for the starship's Id. The other Starship properties receive valid default values when an instance of the Starship type is created.</li>
                <li>The Submit method executes when the Submit button is selected.</li>
                <li>The form is validated by calling EditContext.Validate in the Submit method.</li>
                <li>Logging is executed depending on the validation result.</li>
            </ul>
        </article>
        
        <EditForm EditContext="editContext_4" OnSubmit="Submit_4" FormName="Starship4">
            <DataAnnotationsValidator />

            <fieldset role="group">
                <label>
                    Identifier: 
                    <InputText @bind-Value="Model_4!.Id" />
                </label>

                <label>
                    Primary Classification: 
                    <InputSelect @bind-Value="Model_4!.Classification">
                        <option value="">
                            Select classification ...
                        </option>
                        <option checked="@(Model_4!.Classification == "Exploration")" 
                            value="Exploration">
                            Exploration
                        </option>
                        <option checked="@(Model_4!.Classification == "Diplomacy")" 
                            value="Diplomacy">
                            Diplomacy
                        </option>
                        <option checked="@(Model_4!.Classification == "Defense")" 
                            value="Defense">
                            Defense
                        </option>
                    </InputSelect>
                </label>

                <label>
                    Maximum Accommodation: 
                    <InputNumber @bind-Value="Model_4!.MaximumAccommodation" />
                </label>

                <label>
                    Production Date: 
                    <InputDate @bind-Value="Model_4!.ProductionDate" />
                </label>
            </fieldset>
            <div>
                <label>
                    Description (optional): 
                    <InputTextArea @bind-Value="Model_4!.Description" />
                </label>
            </div>
            <div>
                <label>
                    Engineering Approval: 
                    <InputCheckbox @bind-Value="Model_4!.IsValidatedDesign" />
                </label>
            </div>
            <div>
                <button type="submit">Submit</button>
            </div>
        </EditForm>
        <blockquote>
            @if(Model_4 is not null)
            {
                <StarshipProfile Ship="Model_4" />
            }
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>
        @code {
            private EditContext? editContext_4;

            [SupplyParameterFromForm]
            private BlazorSample.Starship? Model_4 { get; set; } 

            private void Initialize_Model_4()
            {
                Model_4 ??=
                    new()
                        {
                            Id = "NCC-1701",
                            Classification = "Exploration",
                            MaximumAccommodation = 150,
                            IsValidatedDesign = true,
                            ProductionDate = new DateTime(2245, 4, 11)
                        };
                editContext_4 = new(Model_4);
            }

            private async Task Submit_4()
            {
                if (editContext_4 != null && editContext_4.Validate())
                {
                    @* Logger.LogInformation("Submit called: Form is valid"); *@

                    // await ...
                }
                else
                {
                    @* Logger.LogInformation("Submit called: Form is INVALID"); *@
                }
            }
        }
    </details>
</article>


<article> <!-- Starship-5 -->
    <details>
        <summary role="button" class="secondary"><b>Starship-5</b> Adaptation</summary>

        <article>
            <p>In the following example, the user must select at least two starship classifications but no more than three classifications.</p>
        </article>

        <h1>Bind Multiple <code>InputSelect</code> Example</h1>

        <EditForm EditContext="editContext_5" OnValidSubmit="Submit" FormName="Starship5">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset role="group">
                <label>
                    Identifier: 
                    <InputText @bind-Value="Model_5!.Id" />
                </label>

                <label>
                    Primary Classification: 
                    <InputSelect @bind-Value="Model_5!.Classification">
                        <option value="">
                            Select classification ...
                        </option>
                        <option checked="@(Model_5!.Classification == "Exploration")" 
                            value="Exploration">
                            Exploration
                        </option>
                        <option checked="@(Model_5!.Classification == "Diplomacy")" 
                            value="Diplomacy">
                            Diplomacy
                        </option>
                        <option checked="@(Model_5!.Classification == "Defense")" 
                            value="Defense">
                            Defense
                        </option>
                    </InputSelect>
                </label>

                <label>
                    Maximum Accommodation: 
                    <InputNumber @bind-Value="Model_5!.MaximumAccommodation" />
                </label>

                <label>
                    Production Date: 
                    <InputDate @bind-Value="Model_5!.ProductionDate" />
                </label>
            </fieldset>
            <div>
                <label>
                    Description (optional): 
                    <InputTextArea @bind-Value="Model_5!.Description" />
                </label>
            </div>
            <div>
                <label>
                    Engineering Approval: 
                    <InputCheckbox @bind-Value="Model_5!.IsValidatedDesign" />
                </label>
            </div>
            <div>
                <label>
                    Select classifications (Minimum: 2, Maximum: 3):
                    <InputSelect @bind-Value="Model_5!.SelectedClassification">
                        <option value="@BlazorSample.Classification.Exploration">Exploration</option>
                        <option value="@BlazorSample.Classification.Diplomacy">Diplomacy</option>
                        <option value="@BlazorSample.Classification.Defense">Defense</option>
                        <option value="@BlazorSample.Classification.Research">Research</option>
                    </InputSelect>
                </label>
            </div>
            <div>
                <button type="submit">Submit</button>
            </div>
        </EditForm>
        <blockquote>
            @if(Model_5!.IsValidatedDesign)
            {
                <StarshipProfile Ship="Model_5" />
            }
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>

        @if (Model_5?.SelectedClassification?.Length > 0)
        {
            <div>@string.Join(", ", Model_5.SelectedClassification)</div>
        }

        @code {
            private EditContext? editContext_5;

            [SupplyParameterFromForm]
            private BlazorSample.StarshipClass? Model_5 { get; set; }

            protected void Initialize_Model_5()
            {
                Model_5 = new();
                editContext_5 = new(Model_5);
            }

            private void Submit()
            {
                // Logger.LogInformation("Submit called: Processing the form");
            }
        }        
    </details>
</article>


<article> <!-- Using <InputSelect> -->
    <details>
        <summary role="button" class="secondary">Using <code>&lt;InputSelect&gt;</code> Components</summary>
        <p>This component generates a <code>&lt;select&gt;</code> in the rendered HTML. Key to working with this component is that you must generate the various <code>&lt;option&gt;</code> elements yourself. You can do this either with hard-coded options or with a loop. You can bind the values for this component to various data types, such as <code>int</code>, <code>double</code>, <code>string</code> or even enumerated types.</p>
        <EditForm Model="this" FormName="UsingInputSelect" OnSubmit="DoNothing">
            <fieldset class="grid">
                <label>
                    Rate This
                    <InputSelect @bind-Value="Rating">
                        @for(int count=1; count <=5; count++)
                        {
                            <option value="@count">@count Star</option>
                        }
                    </InputSelect>
                </label>
                <label>
                    Favorite Constant
                    <InputSelect @bind-Value="FavoriteConstant">
                        <option value="0">Zero</option>
                        <option value="@Math.PI">PI</option>
                        <option value="@Math.Tau">Tau</option>
                        <option value="@Math.E">E</option>
                    </InputSelect>
                </label>
                <label>
                    Pick a Tutor
                    <InputSelect @bind-Value="Tutor">
                        <option value="">[no name]</option>
                        <option value="Stew Dent">Stewart</option>
                        <option value="Anna Lyst">Anna</option>
                        <option>Phobe</option>
                    </InputSelect>
                </label>
                <label>
                    Main Commute is by
                    <InputSelect @bind-Value="PrimaryCommute">
                        <option value="@TransportMode.None">(none)</option>
                        <option value="@TransportMode.Walk">Walking</option>
                        <option value="@TransportMode.Transit">Public Transit</option>
                        <option value="@TransportMode.Drive">Driving</option>
                    </InputSelect>
                </label>
                <label>
                    Season
                    <InputSelect @bind-Value="FavoriteSeason">
                        <option value="">(none)</option>
                        @foreach (var value in Enum.GetValues(typeof(Season)))
                        {
                            <option>@value</option>
                        }
                    </InputSelect>
                </label>
            </fieldset>
        </EditForm>
        <blockquote>
            Rating: @for(int count = 1; count <= Rating; count++)
            {
                <i class="las la-star"></i>
            }
            <b>&nbsp;&nbsp;|&nbsp;&nbsp;</b>
            Constant: @FavoriteConstant
            <b>&nbsp;&nbsp;|&nbsp;&nbsp;</b>
            Tutor: @Tutor
            <b>&nbsp;&nbsp;|&nbsp;&nbsp;</b>
            Commute: @PrimaryCommute
            <b>&nbsp;&nbsp;|&nbsp;&nbsp;</b>
            Season: @FavoriteSeason
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>

        @code {
            private int Rating { get; set; }
            private double FavoriteConstant { get; set; }
            private string? Tutor { get; set; }
            private TransportMode PrimaryCommute { get; set; }
            private Season? FavoriteSeason { get; set; }

            public enum TransportMode { None, Walk, Transit, Drive }
            public enum Season { Spring, Summer, Autumn, Winter }

        }
    </details>
</article>


<article> <!-- Starship-6 Adaptation -->
    <details>
        <summary role="button" class="secondary"><b>Starship-6</b> Adaptation <i>- Multiple Forms</i></summary>
        <article>
            <p>This is probably a bit redundant, but it illustrates a couple of items regarding multiple forms, namely how the <code>[SupplyParameterFromForm]</code> property attribute can specify the name of the form that the property is associated with.</p>
        </article>

        <section>
            <EditForm Model="Model1" OnSubmit="Submit1" FormName="Holodeck1">
                <div>
                    <label>
                        Holodeck 1 Identifier: 
                        <InputText @bind-Value="Model1!.Id" />
                    </label>
                </div>
                <div>
                    <button type="submit">Submit</button>
                </div>
            </EditForm>

            <EditForm Model="Model2" OnSubmit="Submit2" FormName="Holodeck2">
                <div>
                    <label>
                        Holodeck 2 Identifier: 
                        <InputText @bind-Value="Model2!.Id" />
                    </label>
                </div>
                <div>
                    <button type="submit">Submit</button>
                </div>
            </EditForm>
        </section>

        @code {
            [SupplyParameterFromForm(FormName = "Holodeck1")]
            public BlazorSample.Holodeck? Model1 { get; set; }

            [SupplyParameterFromForm(FormName = "Holodeck2")]
            public BlazorSample.Holodeck? Model2 { get; set; }

            private void Initialize_Model_6()
            {
                Model1 ??= new();
                Model2 ??= new();
            }

            private void Submit1()
            {
                if(string.IsNullOrWhiteSpace(Model1!.Id))
                {
                    Model1.Id = "Executive Holosuite";
                }
                Model1.Booked = true;
            }

            private void Submit2()
            {
                if(string.IsNullOrWhiteSpace(Model2!.Id))
                {
                    Model2.Id = "Shared Holosuite";
                }
                Model2.Booked = false;
            }
        }
        <blockquote>
            <section>
                <HolodeckSuite Suite="Model1" />
                <HolodeckSuite Suite="Model2" />
            </section>
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>
    </details>
</article>


<article> <!-- Group of <InputCheckbox> -->
    <details>
        <summary role="button" class="secondary">Group of <code>&lt;InputCheckbox&gt;</code> Components</summary>
        <article>
            <p>This example was taken and adapted from the article <a href="https://martink.me/articles/blazor-checkbox-group" target="_blank" rel="noopener noreferrer">BLAZOR CHECKBOX GROUP</a>, which is worth a read on this topic. It's probably not the only way to address it, but it's a reasonable one.</p>
        </article>

        <h1>Blazor-Checkbox-Group</h1>
        <EditForm EditContext="editContext" OnSubmit="HandleSubmit" FormName="CheckboxGroupDemo">
            <p>Make at least one choice...</p>

            <label>
                Choice A:
                <InputCheckbox type="checkbox" id="choiceA" @bind-Value="model.ChoiceA" />
            </label>

            <label>
                Choice B:
                <InputCheckbox type="checkbox" id="choiceA" @bind-Value="model.ChoiceB" />
            </label>

            <label>
                Choice C:
                <InputCheckbox type="checkbox" id="choiceA" @bind-Value="model.ChoiceC" />
            </label>

            <button type="submit">Submit</button>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>

        @if (formIsValid)
        {
            <p>The form is valid, well done for checking at least one of the checkboxes.</p>
        }

        @code{
            ModelForForm model;
            EditContext editContext;
            bool formIsValid;

            protected void Initialize_Model_Extra()
            {
                model = new ModelForForm();
                editContext = new EditContext(model);
            }

            private void HandleSubmit()
            {
                var isValid = editContext.Validate();
                if (isValid)
                {
                    // Set form is valid for the purposes of the sample, just to show that the form is valid.
                    formIsValid = true;
                }
                else
                {
                    return;
                }
            }

            private class ModelForForm
            {
                public bool ChoiceA { get; set; }

                public bool ChoiceB { get; set; }

                public bool ChoiceC { get; set; }

                [Required]
                [Range(typeof(bool), "true", "true", ErrorMessage = "At least one choice is required.")]
                public bool OneChoiceSelected
                {
                    get
                    {
                        return ((ChoiceA) || (ChoiceB) || (ChoiceC));
                    }
                    set { }
                }
            }
        }

        <blockquote>
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>
    </details>
</article>


<article> <!-- Using <InputRadioGroup> -->
    <details>
        <summary role="button" class="secondary">Using <code>&lt;InputRadioGroup&gt;</code> Components</summary>
        <article>
            <p>This example was taken and adapted from a <a href="https://stackoverflow.com/a/66418698" target="_blank" rel="noopener noreferrer">Stack Overflow answer</a>.</p>
        </article>
        <EditForm Model="Automobile">
            <InputRadioGroup @bind-Value="@Automobile.SelectedManufacturer">
                Manufacturer:
                <br>
                @foreach (var manufacturer in Manufacturers)
                {
                    <InputRadio Value="manufacturer" />
                    @manufacturer
                    <br>
                }
            </InputRadioGroup>
        </EditForm>


        @code {

        List<String> Manufacturers = new List<string> { "Ford", "Toyota", "Tesla" };

        AutomobileInfo Automobile = new AutomobileInfo();

            class AutomobileInfo
            {
                public string SelectedManufacturer { get; set; } = "Tesla";
            }
        }
        <blockquote>
            Selected <mark>@Automobile?.SelectedManufacturer</mark> from the list <i>@string.Join(", ", Manufacturers)</i>.
            <footer><cite>&ndash; Output will appear above</cite></footer>
        </blockquote>
    </details>
</article>
