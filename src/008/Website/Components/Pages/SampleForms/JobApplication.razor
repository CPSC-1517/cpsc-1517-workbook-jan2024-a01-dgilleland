@page "/SampleForms/JobApplication"
@rendermode InteractiveServer

<PageTitle>Job Application</PageTitle>

@code {
    private JobApplicant? Person { get; set; }
    protected override void OnInitialized()
    {
        Person = new();
    }
    private void ToggleJob(ChangeEventArgs e, string job)
    {
        bool addJob = bool.Parse(e.Value.ToString());
        if(addJob)
        {
            Person.JobRoles.Add(job);
        }
        else
        {
            Person.JobRoles.Remove(job);
        }
    }
}
<section>
    <h1>Job Application</h1>
    <p>Please fill out the following form and click Submit to apply for the listed job(s).</p>
    <fieldset>
        <legend>Application Form</legend>
        <label for="fullName">Name</label>
        <input name="fullName" type="text" @bind-value="Person.FullName">
        <label for="emailAddress">Email</label>
        <input name="emailAddress" type="email" @bind-value="Person.Email">
        <label for="phoneNumber">Phone</label>
        <input name="phoneNumber" type="tel" @bind-value="Person.PhoneNumber"
                pattern="\d{3}[\-]\d{3}[\-]\d{4}"
                title="Canadian/US Phone Number">
        <fieldset>
            <legend>Full/Part Time</legend>
            <div class="inline-block">
                <input name="fullOrPartTime" id="fullTime" type="radio" @onchange="@(() => Person.IsFullTime = true)" />
                <label for="fullTime">Full time</label>
                <input name="fullOrPartTime" id="partTime" type="radio" @onchange="@(() => Person.IsFullTime = false)" />
                <label for="partTime">Part time</label>
            </div>
        </fieldset>
        <fieldset>
        <legend>Jobs</legend>
            <input type="checkbox" id="jobInSales" name="jobIn" value="Sales" @onchange="@((evt) => ToggleJob(evt, "Sales"))" />
            <label for="jobInSales">Sales</label>

            <input type="checkbox" id="jobInManufacturing" name="jobIn" value="Manufacturing"
                    @onchange="@((evt) => ToggleJob(evt, "Manufacturing"))">
            <label for="jobInManufacturing">Manufacturing</label>

            <input type="checkbox" id="jobInAccounting" name="jobIn" value="Accounting"
                    @onchange="@((evt) => ToggleJob(evt, "Accounting"))">
            <label for="jobInAccounting">Accounting</label>

            <input type="checkbox" id="jobInShippingReceiving" name="jobIn" value="Shipping/Receiving"
                    @onchange="@((evt) => ToggleJob(evt, "Shipping/Receiving"))">
            <label for="jobInShippingReceiving">Shipping/Receiving</label>
        </fieldset>
    </fieldset>
    <fieldset class="grid">
        <input name="submit" type="submit" value="Submit" />
        <input type="reset" value="Reset" />
        <input name="submit" type="submit" value="Clear Form" />
    </fieldset>

</section>

@* @{
    // Grab whatever values are in the Request name/value collection
    // TODO: Use the Request.Form[]  because the <form method="post">
    var name = Request["fullName"];
    var email = Request["emailAddress"];
    var phone = Request["phoneNumber"];
    var workAmount = Request["fullOrPartTime"];
    // Note that the workArea info can have many values, because we are using checkboxes
    var workArea = Request["jobIn"] ?? string.Empty; // Null Coalescing Operator
}
@if (IsPost)
{
    var submitAction = Request["submit"];
    switch (submitAction)
    {
        case "Submit":
            // Process the application
            <div><b>Thank you <u>@name</u> for your application!</b></div>
            break;
        case "Clear Form":
            // empty out form
            name = email = phone = workAmount = workArea = string.Empty;
            break;
    }
} *@

<article>
    <h4>Diagnostics</h4>
    <ul>
        <li><b>Full Name:</b> @Person.FullName</li>
        <li><b>Is Full Time:</b> @Person.IsFullTime</li>
        <li><b>Phone:</b> @Person.PhoneNumber</li>
        <li><b>Jobs:</b> @string.Join(", ", Person.JobRoles)</li>
        <li><b>:</b> </li>
    </ul>
</article>