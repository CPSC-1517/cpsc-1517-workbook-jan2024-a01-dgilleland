@page "/About"
@rendermode InteractiveServer
@using InventorySystem
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>About This Demo</PageTitle>

<h1>About This Demo</h1>

<p>@UserFeedback</p>

<section>
    @code {
        private const string _DataFile = "./Data/Products.tsv";

        protected override void OnInitialized()
        {
            @* Step 2 - Perform any initialization *@
            UserFeedback = string.Empty;
            Product = new() { ProductId = Guid.NewGuid() };

            List<Product> products = new();
            string[] lines = File.ReadAllLines(_DataFile);
            foreach (var line in lines)
            {
                try
                {
                    products.Add(Product.Parse(line));
                }
                catch (Exception ex)
                {
                    UserFeedback += ex.Message;
                }
            }
            UserFeedback = $"Loaded {lines.Length} lines from the file. ";
            Catalog = products.AsQueryable();
        }
    }
    <article>
        <h2>Product Form</h2>
        @code {
            public string? UserFeedback { get; set; }
            @* Step 1 - Set up your model as properties *@
            public Product? Product { get; set; }


            private void HandleSubmit()
            {
                @* Step 4 - Process the form *@
                // TODO: Something to save info
                File.AppendAllLines(_DataFile, new string[] { Product!.ToString() });
                // TODO: Give feedback to the user
            }

            private void ClearForm()
            {
                @* Step 5a - Create a method to reset the form/model *@
                Product = new() { ProductId = Guid.NewGuid() };
            }
        }

        <p>@UserFeedback</p>

        @* Step 3 - Build a form for user input (presuming you at least have a method for handling submit) *@
        <EditForm FormName="Edit" Model="Product" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>
                Product Id
                <input disabled value="@Product!.ProductId" />
            </label>

            <label>
                Name
                <InputText @bind-Value="Product!.Name" />
            </label>

            <label>
                Description
                <InputText @bind-Value="Product!.Description" />
            </label>

            <label>
                Restock Level
                <InputNumber @bind-Value="Product!.RestockLevel" />
            </label>

            <label>
                Return Level
                <InputNumber @bind-Value="Product!.ReturnLevel" />
            </label>

            <button>Submit</button>
            @* Step 5b - Wire one button directly up to its event handler/method *@
            <button type="button" @onclick="ClearForm">Clear</button>
        </EditForm>
    </article>
    <article>
        <h2>Product Catalog</h2>
        @code {
            private IQueryable<Product>? Catalog { get; set; }
            private string Abbreviate(int restockQty, int returnQty)
            {
                return $"{restockQty} | {returnQty}";
            }
        }

        <QuickGrid Items="Catalog">
            <PropertyColumn Property="@(x => x.Name)" />
            <PropertyColumn Property="@(x => Abbreviate(x.RestockLevel, x.ReturnLevel))" Title="Restock/Return" Align="Align.Center" />
            <PropertyColumn Property="@(x => x.IncludesStandardWarranty ? "✓" : "✕")" Title="Warranty" Align="Align.Center" />
        </QuickGrid>
    </article>
</section>
<section>
    <blockquote>
        <h4>Diagnostics</h4>
    </blockquote>
    <blockquote>
        <h4>Diagnostics</h4>
    </blockquote>
</section>